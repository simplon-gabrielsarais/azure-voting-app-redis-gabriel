# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

stages:
- stage: 'Get_Versions' 
  displayName: 'Get_Versions' 
  jobs:
  - job: 'Get_Versions' 
    displayName: 'Get_Versions' 
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'connexion'
        namespace: 'prod'
        command: 'get'
        arguments: 'deployments'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
      name: "kubeinfo"

    - task: CmdLine@2
      inputs:
        script: |
          versionrep=$((curl 'https://hub.docker.com/v2/repositories/grabibel/voteapp_brief8_gs/tags' | jq '."results"[0]["name"]')| sed 's/^"//;s/"$//')
          versionold=$(echo $KUBEINFO_KUBECTLOUTPUT | jq '.items[1].spec.template.spec.containers[].image' | cut -d: -f2 | sed 's/"//')
          versionnew=$(cat azure-vote/main.py | grep -E "^ver = \"[0-9.]+\"\$"|awk -F\" {'print $2'})
          echo "##vso[task.setvariable variable=vernew]$versionnew"
          echo "##vso[task.setvariable variable=verrep]$versionrep"
          echo "##vso[task.setvariable variable=verold]$versionold"
          sed -i 's/{{ version }}/'$versionnew'/g' kube_brief6/voteapp.yml
          sed -i 's/{{ version }}/'$versionnew'/g' qal/voteapp_qal.yml
        #  sed -i "s/  - port: [[:digit:]]\{2\}/  - port: 85/g" kube_brief6/voteapp.yml
        #  sed -i "s/              number: [[:digit:]]\{2\}/              number: 85/g" kube_brief6/ingress.yml
      name: "scriptver"


- stage: 'Build_docker_image'
  dependsOn:
  - Get_Versions
  displayName: 'Build_docker_image' 
  jobs:
  - job: 'Docker_image'
    variables:
      verrep: $[stageDependencies.Get_Versions.Get_Versions.outputs['scriptver.verrep']]
      vernew: $[stageDependencies.Get_Versions.Get_Versions.outputs['scriptver.vernew']]
    displayName: 'Docker Image Build' 
    pool:
      vmImage: ubuntu-latest 
    steps:
    - task: Docker@2
      condition: ne(${{variables.verrep}},${{variables.vernew}})
      inputs:
        containerRegistry: 'voteapp_Brief8_GS'
        repository: 'grabibel/voteapp_brief8_gs'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: $(vernew)
      name: "dockerhub_publish"


- stage: 'QAL_Deployment'
  dependsOn:
  - Get_Versions
  - Build_docker_image
  condition: succeeded()
  displayName: 'Deploy on QAL' 
  jobs:
  - job: 'QAL_Deploy'
    variables:
      verold: $[stageDependencies.Get_Versions.Get_Versions.outputs['scriptver.verold']]
      vernew: $[stageDependencies.Get_Versions.Get_Versions.outputs['scriptver.vernew']]
    displayName: 'Deploy on QAL' 
    pool:
      vmImage: 'ubuntu-latest' 
    steps:
    - task: KubernetesManifest@0
      name: "kube_qal"
      condition: ne(${{variables.verold}},${{variables.vernew}})
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'connexion'
        namespace: 'qal'
        manifests: '**/qal/*'
        rolloutStatusTimeout: '60'

- stage: 'Test_Charge'
  condition: succeeded()
  displayName: 'Test_Charge' 
  jobs:
  - job: 'Test' 
    displayName: 'Test_Charge' 
    pool:
      vmImage: 'ubuntu-latest' 
    steps:
    - task: CmdLine@2
      name: TestCharge
      inputs:
        script: |
          seq 250 | parallel --max-args 0  --jobs 20 "curl -k -iF 'vote=kebab' http://qal.distributeur-de-pain.best"
    - task: CmdLine@2
      inputs:
        script: 'sleep 50'

    - task: Kubernetes@1
      name: kubepods
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'connexion'
        namespace: 'qal'
        command: 'get'
        useConfigurationFile: true
        configuration: './qal/voteapp_qal.yml'


    - task: CmdLine@2
      name: "GetPodsCount"
      inputs:
        script: |
          voteappcount=$(echo $KUBEPODS_KUBECTLOUTPUT | jq '.items[0].spec.replicas')
          echo $voteappcount
          echo "##vso[task.setvariable variable=appcnt]$voteappcount"

- stage: 'Canary_deploy'
  dependsOn:
  - Test_Charge
  condition: gt(dependencies.Test_Charge.outputs['Test.GetPodsCount.appcnt'],2)
  displayName: 'Canary_deploy' 
  jobs:
  - job: 'canary' 
    displayName: 'Canary_deploy' 
    pool:
      vmImage: 'ubuntu-latest' 
    steps:
    - task: KubernetesManifest@0
      condition: gt(stageDependencies.Test_Charge.Test.outputs['GetPodsCount.appcnt'],2)
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'connexion'
        namespace: 'prod'
        strategy: 'canary'
        percentage: '50'
        manifests: '**/kube_brief6/*'
        rolloutStatusTimeout: '60'
      name: "kube_prod"

- stage: 'ManualIntervention'
  dependsOn:
  - Canary_deploy
  condition: succeeded() 
  displayName: 'In waiting of validation of working canary release' 
  jobs:
  - job: waitForValidation
    displayName: Wait for external validation
    pool: server
    timeoutInMinutes: 10080 # job times out in 7 days
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 10080 # task times out in 7 day
      inputs:
        notifyUsers: |
          gsarais.ext@simplonformations.onmicrosoft.com
        instructions: 'Please validate the build configuration and resume'
        onTimeout: 'resume'

- stage: 'DeployOnProd'
  dependsOn:
  - Test_Charge
  - Canary_deploy
  - ManualIntervention
  displayName: 'Deploy on Prod and delete qal and Canary' 
  jobs:
  - job: 'Deployonprod' 
    displayName: 'Deploy on Prod and delete qal and Canary' 
    pool:
      vmImage: 'ubuntu-latest' 
    steps:

    - task: KubernetesManifest@0
      name: "delete_canary"
      condition: gt(stageDependencies.Test_Charge.Test.outputs['GetPodsCount.appcnt'],2)
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'connexion'
        namespace: 'prod'
        strategy: 'canary'
        percentage: '0'
        manifests: '**/kube_brief6/*'
        rolloutStatusTimeout: '60'

    - task: KubernetesManifest@0
      name: "kube_qal_del"
      inputs:
        action: 'delete'
        kubernetesServiceConnection: 'connexion'
        namespace: 'qal'
        manifests: '**/qal/*'
        rolloutStatusTimeout: '60'

    - task: KubernetesManifest@0
      name: "kube_prod"
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'connexion'
        namespace: 'prod'
        manifests: '**/kube_brief6/*'
        rolloutStatusTimeout: '60'
