# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:

- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'connexion'
    namespace: 'prod'
    command: 'get'
    arguments: 'deployments'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
  name: "kubeinfo"

- task: CmdLine@2
  inputs:
    script: |
      versionrep=$((curl 'https://hub.docker.com/v2/repositories/grabibel/voteapp_brief8_gs/tags' | jq '."results"[0]["name"]')| sed 's/^"//;s/"$//')
      versionold=$(echo $KUBEINFO_KUBECTLOUTPUT | jq '.items[1].spec.template.spec.containers[].image' | cut -d: -f2 | sed 's/"//')
      versionnew=$(cat azure-vote/main.py | grep -E "^ver = \"[0-9.]+\"\$"|awk -F\" {'print $2'})
      echo "##vso[task.setvariable variable=vernew]$versionnew"
      echo "##vso[task.setvariable variable=verrep]$versionrep"
      echo "##vso[task.setvariable variable=verold]$versionold"
      sed -i 's/{{ version }}/'$versionnew'/g' kube_brief6/voteapp.yml
      sed -i 's/{{ version }}/'$versionnew'/g' kube_brief6/qal/voteapp_qal.yml
#      sed -i "s/  - port: [[:digit:]]\{2\}/  - port: 85/g" kube_brief6/voteapp.yml
#      sed -i "s/              number: [[:digit:]]\{2\}/              number: 85/g" kube_brief6/ingress.yml


- task: Docker@2
  condition: ne(variables['verrep'],variables['vernew'])
  inputs:
    containerRegistry: 'voteapp_Brief8_GS'
    repository: 'grabibel/voteapp_brief8_gs'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
    tags: $(vernew)
  name: "dockerhub_publish"

- task: KubernetesManifest@0
  condition: ne(variables['verold'],variables['vernew'])
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: 'connexion'
    namespace: 'qal'
    manifests: '**/kube_brief6/qal/*'
    rolloutStatusTimeout: '60'
  name: "kube_qal"

- task: PythonScript@0
  inputs:
    scriptSource: 'inline'
    script: |
      quit = threading.Event()
      
      
      def send_votes(thread_id: int, quit: threading.Event):
          j = 0
          while not quit.is_set():
              f, ct = random.choice(((f_cats, f_cats_ct), (f_dogs, f_dogs_ct)))
              r = requests.post(URL, data=f, headers={'Content-Type': ct})
              j += 1
              if not r.ok:
                  print(f"[{dt.now()}] thread {thread_id}, request {j}: Error {r.status_code}")
                  continue
      
              print(f"[{dt.now()}] thread {thread_id}, request {j}: {r.headers['X-HANDLED-BY']}")
      
      
      def main():
          print(f"[{dt.now()}] DÃ©but du test")
      
          quits = []
          with cf.ThreadPoolExecutor(10) as exc:
              try:
                  for i in range(1, 10, 2):
                      q = threading.Event()
                      quits.append(q)
                      exc.submit(send_votes, i, q)
                      exc.submit(send_votes, i + 1, q)
                      time.sleep(45)
      
                  for q in quits:
                      q.set()
                      time.sleep(45)
              except KeyboardInterrupt:
                  pass
      
              for q in quits:
                  q.set()
      
          print(f"[{dt.now()}] Fin du test")
          return
      
      
      if __name__ == '__main__':
          sys.exit(main())

- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'connexion'
    namespace: 'qal'
    command: 'get'
    arguments: 'pod'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
  name: kubepods

- task: CmdLine@2
  inputs:
    script: |
      verifscale=$(echo $KUBEPODS_KUBECTLOUTPUT)
      echo $verifscale


- task: KubernetesManifest@0
  condition: ne(variables['verold'],variables['vernew'])
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: 'connexion'
    namespace: 'prod'
    strategy: 'canary'
    percentage: '10'
    manifests: '**/kube_brief6/*'
    rolloutStatusTimeout: '60'
  name: "kube_prod"

