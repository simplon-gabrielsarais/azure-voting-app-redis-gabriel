# Starter pipeline 
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
stages:
- stage: 'verif_code'
  displayName: 'verif_code'
  jobs:
  - job: verif_version
    displayName: 'verifcode' 
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self
      fetchDepth: 0
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'sanarqube'
        organization: 'gsaraisext-devops'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'gsaraisext_Brief-8'
        cliProjectName: 'Brief-8'
        cliSources: '.'
    - task: SonarCloudAnalyze@1
    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'
    
- stage: 'Get_Versions' 
  displayName: 'Get_Versions' 
  jobs:
  - job: 'Get_Versions' 
    displayName: 'Get_Versions' 
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'connexion'
        namespace: 'prod'
        command: 'get'
        arguments: 'deployments --field-selector metadata.name=voteapp'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
      name: "kubeinfo"

    - task: CmdLine@2
      inputs:
        script: |
          versionrep=$((curl 'https://hub.docker.com/v2/repositories/grabibel/voteapp_brief8_gs/tags' | jq '."results"[0]["name"]')| sed 's/^"//;s/"$//')
          versionold=$(echo $KUBEINFO_KUBECTLOUTPUT | jq '.items[0].spec.template.spec.containers[].image' | cut -d: -f2 | sed 's/"//')
          versionnew=$(cat azure-vote/main.py | grep -E "^ver = \"[0-9.]+\"\$"|awk -F\" {'print $2'})
          echo "##vso[task.setvariable variable=vernew;isOutput=true]$versionnew"
          echo "##vso[task.setvariable variable=verrep;isOutput=true]$versionrep"
          echo "##vso[task.setvariable variable=verold;isOutput=true]$versionold"
          echo verrep=$versionrep verold=$versionold vernew=$versionnew
        #  sed -i "s/  - port: [[:digit:]]\{2\}/  - port: 85/g" kube_brief6/voteapp.yml
        #  sed -i "s/              number: [[:digit:]]\{2\}/              number: 85/g" kube_brief6/ingress.yml
      name: "scriptver"


- stage: 'Build_docker_image'
  variables:
    verrep: $[ stageDependencies.Get_Versions.Get_Versions.outputs['scriptver.verrep'] ]
    vernew: $[ stageDependencies.Get_Versions.Get_Versions.outputs['scriptver.vernew'] ]
  dependsOn:
  - Get_Versions
  displayName: 'Build_docker_image' 
  jobs:
  - job: 'Docker_image'
    displayName: 'Docker Image Build' 
    pool:
      vmImage: ubuntu-latest 
    steps:
    - task: Docker@2
      condition: ne(variables.verrep,variables.vernew)
      inputs:
        containerRegistry: 'voteapp_Brief8_GS'
        repository: 'grabibel/voteapp_brief8_gs'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: $(vernew)
      name: "dockerhub_publish"


- stage: 'QAL_Deployment'
  dependsOn:
  - Get_Versions
  - Build_docker_image
  condition: succeeded()
  displayName: 'Deploy on QAL' 
  jobs:
  - job: 'QAL_Deploy'
    variables:
      verold: $[stageDependencies.Get_Versions.Get_Versions.outputs['scriptver.verold']]
      vernew: $[stageDependencies.Get_Versions.Get_Versions.outputs['scriptver.vernew']]
    displayName: 'Deploy on QAL' 
    pool:
      vmImage: 'ubuntu-latest' 
    steps:
    - task: CmdLine@2
      name: modif_manif
      inputs:
        script: |
          sed -i 's/{{ version }}/'$(vernew)'/g' kube_brief6/voteapp.yml
          sed -i 's/{{ version }}/'$(vernew)'/g' qal/voteapp_qal.yml
    - task: KubernetesManifest@0
      name: "kube_qal"
      condition: ne(variables.verold,variables.vernew)
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'connexion'
        namespace: 'qal'
        manifests: '**/qal/*'
        rolloutStatusTimeout: '60'

- stage: 'Test_Charge'
  condition: succeeded()
  dependsOn:
  - Get_Versions
  - QAL_Deployment
  displayName: 'Test_Charge'
  jobs:
  - job: 'Test'
    timeoutInMinutes: 5
    variables:
      verold: $[stageDependencies.Get_Versions.Get_Versions.outputs['scriptver.verold']]
      vernew: $[stageDependencies.Get_Versions.Get_Versions.outputs['scriptver.vernew']]
      appcnt: $[stageDependencies.Test_Charge.Test.outputs['GetPodsCount.appcnt']]
    displayName: 'Test_Charge' 
    pool:
      vmImage: 'ubuntu-latest' 
    steps:
    - task: Bash@3
      name: checkpizza
      displayName: Test de la requête pour voter pizza
      inputs:
        targetType: 'inline'
        script: |
          exitcode=$(curl -X POST -d "vote=pizza" http://qal.distributeur-de-pain.best -w "%{http_code}" -o /dev/null)
          echo "##vso[task.setvariable variable=exit1]$exitcode"
    - task: Bash@3
      name: checkkebab
      displayName: Test de la requête pour voter kebab
      condition: eq(variables['exit1'],'200')
      inputs:
        targetType: 'inline'
        script: |
          exitcode=$(curl -X POST -d "vote=kebab" http://qal.distributeur-de-pain.best -w "%{http_code}" -o /dev/null)
          echo "##vso[task.setvariable variable=exit2]$exitcode"
    - task: Bash@3
      name: checksitereset
      displayName: Test de la requête pour reset
      condition: eq(variables['exit2'],'200')
      inputs:
        targetType: 'inline'
        script: |
          exitcode=$(curl -X POST -d "vote=reset" http://qal.distributeur-de-pain.best -w "%{http_code}" -o /dev/null)
          echo "##vso[task.setvariable variable=exit3]$exitcode"
    - task: owaspzap@1
      inputs:
        aggressivemode: true
        scantype: 'targetedScan'
        url: 'http://qal.distributeur-de-pain.best'
    - task: CmdLine@2
      inputs:
        script: |
          tree
          cat ./owaspzap/report.json
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: './owaspzap/report.json'
        testRunTitle: 'owasp'

    - task: CmdLine@2
      condition: eq(variables['exit3'],'200')
      name: timetoresp
      inputs:
        script: |
          inc=0.5
          trqal=$(curl -o /dev/null -s -w %{time_total}\\n  -iF 'vote=kebab' http://qal.distributeur-de-pain.best)
          trprod=$(curl -o /dev/null -s -w %{time_total}\\n  -iF 'vote=kebab' http://prod.distributeur-de-pain.best)
          result=$(echo "$trprod + $inc"|bc)
          echo "##vso[task.setvariable variable=trqal]$trqal"
          echo "##vso[task.setvariable variable=trprod]$result"
          echo qal=$trqal prod=$trprod
    - task: CmdLine@2
      condition: gt(variables['trprod'],variables['trqal'])
      name: TestCharge
      inputs:
        script: |
          seq 250 | parallel --max-args 0  --jobs 20 "curl -k -iF 'vote=kebab' http://qal.distributeur-de-pain.best"
    - task: CmdLine@2
      condition: gt(variables['trprod'],variables['trqal'])
      inputs:
        script: 'sleep 50'
      name: "wait"
    - task: Kubernetes@1
      name: kubepods
      condition: succeeded()
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'connexion'
        namespace: 'qal'
        command: 'get'
        useConfigurationFile: true
        configuration: './qal/voteapp_qal.yml'
    - task: CmdLine@2
      name: modif_manif
      inputs:
        script: |
          sed -i 's/{{ version }}/'$(vernew)'/g' kube_brief6/voteapp.yml
          sed -i 's/{{ version }}/'$(vernew)'/g' qal/voteapp_qal.yml
          echo $(vernew)
    - task: CmdLine@2
      condition: succeeded()
      name: "GetPodsCount"
      inputs:
        script: |
          voteappcount=$(echo $KUBEPODS_KUBECTLOUTPUT | jq '.items[0].spec.replicas')
          echo $voteappcount
          echo "##vso[task.setvariable variable=appcnt;isOutput=true]$voteappcount"
    - task: KubernetesManifest@0
      name: "kube_qal_del"
      inputs:
        action: 'delete'
        kubernetesServiceConnection: 'connexion'
        namespace: 'qal'
        arguments: '-f $(System.DefaultWorkingDirectory)/qal/'

- stage: 'Canary_deploy'
  dependsOn:
  - Test_Charge
  - Get_Versions
  condition: gt(dependencies.Test_Charge.outputs['Test.GetPodsCount.appcnt'],2)
  displayName: 'Canary_deploy' 
  jobs:
  - job: 'canary'
    variables:
      verold: $[stageDependencies.Get_Versions.Get_Versions.outputs['scriptver.verold']]
      vernew: $[stageDependencies.Get_Versions.Get_Versions.outputs['scriptver.vernew']]
      appcnt: $[stageDependencies.Test_Charge.Test.outputs['GetPodsCount.appcnt']]
    displayName: 'Canary_deploy' 
    pool:
      vmImage: 'ubuntu-latest' 
    steps:
    - task: CmdLine@2
      name: modif_manif
      inputs:
        script: |
          sed -i 's/{{ version }}/'$(vernew)'/g' kube_brief6/voteapp.yml
          sed -i 's/{{ version }}/'$(vernew)'/g' qal/voteapp_qal.yml
    - task: KubernetesManifest@0
      condition: gt(variables.appcnt,2)
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'connexion'
        namespace: 'prod'
        strategy: 'canary'
        percentage: '30'
        manifests: '**/kube_brief6/voteapp.yml'
        rolloutStatusTimeout: '120'
      name: "kube_canar"

- stage: 'ManualIntervention'
  dependsOn:
  - Canary_deploy
  condition: succeeded() 
  displayName: 'In waiting of validation of working canary release' 
  jobs:
  - job: waitForValidation
    displayName: Wait for external validation
    pool: server
    timeoutInMinutes: 10080 # job times out in 7 days
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 10080 # task times out in 7 day
      inputs:
        notifyUsers: |
          gsarais.ext@simplonformations.onmicrosoft.com
        instructions: 'Please validate the build configuration and resume'
        onTimeout: 'resume'

- stage: 'supcanar'
  condition: failed()
  dependsOn:
  - Get_Versions
  - ManualIntervention
  - Test_Charge
  displayName: 'delete Canary' 
  jobs:
  - job: 'delete'
    variables:
      verold: $[stageDependencies.Get_Versions.Get_Versions.outputs['scriptver.verold']]
      vernew: $[stageDependencies.Get_Versions.Get_Versions.outputs['scriptver.vernew']]
    displayName: 'Deploy on Prod and delete Canary' 
    pool:
      vmImage: 'ubuntu-latest' 
    steps:
    - task: CmdLine@2
      name: modif_manif
      inputs:
        script: |
          sed -i 's/{{ version }}/'$(vernew)'/g' kube_brief6/voteapp.yml
          sed -i 's/{{ version }}/'$(vernew)'/g' qal/voteapp_qal.yml
    - task: KubernetesManifest@0
      name: "delete_canary"
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'connexion'
        namespace: 'prod'
        strategy: 'canary'
        percentage: '0'
        manifests: '**/kube_brief6/*'
        rolloutStatusTimeout: '60'

- stage: 'DeployOnProd'
  dependsOn:
  - Test_Charge
  - Canary_deploy
  - ManualIntervention
  - Get_Versions
  condition: succeeded() 
  displayName: 'Deploy on Prod and delete Canary' 
  jobs:
  - job: 'Deployonprod'
    variables:
      verold: $[stageDependencies.Get_Versions.Get_Versions.outputs['scriptver.verold']]
      vernew: $[stageDependencies.Get_Versions.Get_Versions.outputs['scriptver.vernew']]
    displayName: 'Deploy on Prod and delete Canary' 
    pool:
      vmImage: 'ubuntu-latest' 
    steps:
    - task: CmdLine@2
      name: modif_manif
      inputs:
        script: |
          sed -i 's/{{ version }}/'$(vernew)'/g' kube_brief6/voteapp.yml
          sed -i 's/{{ version }}/'$(vernew)'/g' qal/voteapp_qal.yml
    - task: KubernetesManifest@0
      name: "delete_canary"
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'connexion'
        namespace: 'prod'
        strategy: 'canary'
        percentage: '0'
        manifests: '**/kube_brief6/*'
        rolloutStatusTimeout: '60'
    - task: KubernetesManifest@0
      name: "kube_prod"
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'connexion'
        namespace: 'prod'
        manifests: '**/kube_brief6/*'
        rolloutStatusTimeout: '60'
